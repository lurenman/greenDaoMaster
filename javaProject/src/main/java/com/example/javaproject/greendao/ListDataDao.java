package com.example.javaproject.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.javaproject.greendao.ListData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LIST_DATA.
*/
public class ListDataDao extends AbstractDao<ListData, Void> {

    public static final String TABLENAME = "LIST_DATA";

    /**
     * Properties of entity ListData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Detail_level = new Property(0, Integer.class, "detail_level", false, "DETAIL_LEVEL");
        public final static Property Display_name = new Property(1, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Parent_id = new Property(2, String.class, "parent_id", false, "PARENT_ID");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "USER_ID");
        public final static Property User_id1 = new Property(4, String.class, "user_id1", false, "USER_ID1");
        public final static Property User_id2 = new Property(5, String.class, "user_id2", false, "USER_ID2");
    };


    public ListDataDao(DaoConfig config) {
        super(config);
    }
    
    public ListDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LIST_DATA' (" + //
                "'DETAIL_LEVEL' INTEGER," + // 0: detail_level
                "'DISPLAY_NAME' TEXT," + // 1: display_name
                "'PARENT_ID' TEXT," + // 2: parent_id
                "'USER_ID' TEXT," + // 3: user_id
                "'USER_ID1' TEXT," + // 4: user_id1
                "'USER_ID2' TEXT);"); // 5: user_id2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LIST_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ListData entity) {
        stmt.clearBindings();
 
        Integer detail_level = entity.getDetail_level();
        if (detail_level != null) {
            stmt.bindLong(1, detail_level);
        }
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(2, display_name);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(3, parent_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String user_id1 = entity.getUser_id1();
        if (user_id1 != null) {
            stmt.bindString(5, user_id1);
        }
 
        String user_id2 = entity.getUser_id2();
        if (user_id2 != null) {
            stmt.bindString(6, user_id2);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ListData readEntity(Cursor cursor, int offset) {
        ListData entity = new ListData( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // detail_level
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // display_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_id1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // user_id2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ListData entity, int offset) {
        entity.setDetail_level(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDisplay_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ListData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ListData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
