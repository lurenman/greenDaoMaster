package com.example.javaproject.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.javaproject.greendao.ShortNote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHORT_NOTE.
*/
public class ShortNoteDao extends AbstractDao<ShortNote, Long> {

    public static final String TABLENAME = "SHORT_NOTE";

    /**
     * Properties of entity ShortNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property Lon = new Property(2, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(3, String.class, "lat", false, "LAT");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property DateTime = new Property(5, String.class, "dateTime", false, "DATE_TIME");
        public final static Property ImgFileArray = new Property(6, String.class, "imgFileArray", false, "IMG_FILE_ARRAY");
        public final static Property SoundFileArray = new Property(7, String.class, "soundFileArray", false, "SOUND_FILE_ARRAY");
    };


    public ShortNoteDao(DaoConfig config) {
        super(config);
    }
    
    public ShortNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHORT_NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESC' TEXT," + // 1: desc
                "'LON' TEXT," + // 2: lon
                "'LAT' TEXT," + // 3: lat
                "'ADDRESS' TEXT," + // 4: address
                "'DATE_TIME' TEXT," + // 5: dateTime
                "'IMG_FILE_ARRAY' TEXT," + // 6: imgFileArray
                "'SOUND_FILE_ARRAY' TEXT);"); // 7: soundFileArray
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHORT_NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShortNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(3, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(4, lat);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(6, dateTime);
        }
 
        String imgFileArray = entity.getImgFileArray();
        if (imgFileArray != null) {
            stmt.bindString(7, imgFileArray);
        }
 
        String soundFileArray = entity.getSoundFileArray();
        if (soundFileArray != null) {
            stmt.bindString(8, soundFileArray);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShortNote readEntity(Cursor cursor, int offset) {
        ShortNote entity = new ShortNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imgFileArray
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // soundFileArray
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShortNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImgFileArray(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSoundFileArray(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShortNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShortNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
