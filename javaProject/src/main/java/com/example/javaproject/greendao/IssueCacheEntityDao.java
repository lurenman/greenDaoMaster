package com.example.javaproject.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.javaproject.greendao.IssueCacheEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ISSUE_CACHE_ENTITY.
*/
public class IssueCacheEntityDao extends AbstractDao<IssueCacheEntity, Long> {

    public static final String TABLENAME = "ISSUE_CACHE_ENTITY";

    /**
     * Properties of entity IssueCacheEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Subject = new Property(2, String.class, "subject", false, "SUBJECT");
        public final static Property OccurOrgId = new Property(3, String.class, "occurOrgId", false, "OCCUR_ORG_ID");
        public final static Property IssueKindId = new Property(4, String.class, "issueKindId", false, "ISSUE_KIND_ID");
        public final static Property OccurOrgInternalCode = new Property(5, String.class, "occurOrgInternalCode", false, "OCCUR_ORG_INTERNAL_CODE");
        public final static Property OccurLocation = new Property(6, String.class, "occurLocation", false, "OCCUR_LOCATION");
        public final static Property MainCharacters = new Property(7, String.class, "mainCharacters", false, "MAIN_CHARACTERS");
        public final static Property IssueContent = new Property(8, String.class, "issueContent", false, "ISSUE_CONTENT");
        public final static Property RelatePeopleCount = new Property(9, String.class, "relatePeopleCount", false, "RELATE_PEOPLE_COUNT");
        public final static Property IsEmergency = new Property(10, String.class, "isEmergency", false, "IS_EMERGENCY");
        public final static Property Important = new Property(11, String.class, "important", false, "IMPORTANT");
        public final static Property Lon = new Property(12, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(13, String.class, "lat", false, "LAT");
        public final static Property OccurDate = new Property(14, String.class, "occurDate", false, "OCCUR_DATE");
        public final static Property UniqueIdForMobile = new Property(15, String.class, "uniqueIdForMobile", false, "UNIQUE_ID_FOR_MOBILE");
        public final static Property Files = new Property(16, String.class, "files", false, "FILES");
        public final static Property FirstType = new Property(17, String.class, "firstType", false, "FIRST_TYPE");
        public final static Property SecondType = new Property(18, String.class, "secondType", false, "SECOND_TYPE");
        public final static Property ImgFileArray = new Property(19, String.class, "imgFileArray", false, "IMG_FILE_ARRAY");
        public final static Property SoundFileArray = new Property(20, String.class, "soundFileArray", false, "SOUND_FILE_ARRAY");
        public final static Property FirstTypeId = new Property(21, String.class, "firstTypeId", false, "FIRST_TYPE_ID");
        public final static Property SecondTypeId = new Property(22, String.class, "secondTypeId", false, "SECOND_TYPE_ID");
    };


    public IssueCacheEntityDao(DaoConfig config) {
        super(config);
    }
    
    public IssueCacheEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ISSUE_CACHE_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_NAME' TEXT," + // 1: userName
                "'SUBJECT' TEXT," + // 2: subject
                "'OCCUR_ORG_ID' TEXT," + // 3: occurOrgId
                "'ISSUE_KIND_ID' TEXT," + // 4: issueKindId
                "'OCCUR_ORG_INTERNAL_CODE' TEXT," + // 5: occurOrgInternalCode
                "'OCCUR_LOCATION' TEXT," + // 6: occurLocation
                "'MAIN_CHARACTERS' TEXT," + // 7: mainCharacters
                "'ISSUE_CONTENT' TEXT," + // 8: issueContent
                "'RELATE_PEOPLE_COUNT' TEXT," + // 9: relatePeopleCount
                "'IS_EMERGENCY' TEXT," + // 10: isEmergency
                "'IMPORTANT' TEXT," + // 11: important
                "'LON' TEXT," + // 12: lon
                "'LAT' TEXT," + // 13: lat
                "'OCCUR_DATE' TEXT," + // 14: occurDate
                "'UNIQUE_ID_FOR_MOBILE' TEXT," + // 15: uniqueIdForMobile
                "'FILES' TEXT," + // 16: files
                "'FIRST_TYPE' TEXT," + // 17: firstType
                "'SECOND_TYPE' TEXT," + // 18: secondType
                "'IMG_FILE_ARRAY' TEXT," + // 19: imgFileArray
                "'SOUND_FILE_ARRAY' TEXT," + // 20: soundFileArray
                "'FIRST_TYPE_ID' TEXT," + // 21: firstTypeId
                "'SECOND_TYPE_ID' TEXT);"); // 22: secondTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ISSUE_CACHE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IssueCacheEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(3, subject);
        }
 
        String occurOrgId = entity.getOccurOrgId();
        if (occurOrgId != null) {
            stmt.bindString(4, occurOrgId);
        }
 
        String issueKindId = entity.getIssueKindId();
        if (issueKindId != null) {
            stmt.bindString(5, issueKindId);
        }
 
        String occurOrgInternalCode = entity.getOccurOrgInternalCode();
        if (occurOrgInternalCode != null) {
            stmt.bindString(6, occurOrgInternalCode);
        }
 
        String occurLocation = entity.getOccurLocation();
        if (occurLocation != null) {
            stmt.bindString(7, occurLocation);
        }
 
        String mainCharacters = entity.getMainCharacters();
        if (mainCharacters != null) {
            stmt.bindString(8, mainCharacters);
        }
 
        String issueContent = entity.getIssueContent();
        if (issueContent != null) {
            stmt.bindString(9, issueContent);
        }
 
        String relatePeopleCount = entity.getRelatePeopleCount();
        if (relatePeopleCount != null) {
            stmt.bindString(10, relatePeopleCount);
        }
 
        String isEmergency = entity.getIsEmergency();
        if (isEmergency != null) {
            stmt.bindString(11, isEmergency);
        }
 
        String important = entity.getImportant();
        if (important != null) {
            stmt.bindString(12, important);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(13, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(14, lat);
        }
 
        String occurDate = entity.getOccurDate();
        if (occurDate != null) {
            stmt.bindString(15, occurDate);
        }
 
        String uniqueIdForMobile = entity.getUniqueIdForMobile();
        if (uniqueIdForMobile != null) {
            stmt.bindString(16, uniqueIdForMobile);
        }
 
        String files = entity.getFiles();
        if (files != null) {
            stmt.bindString(17, files);
        }
 
        String firstType = entity.getFirstType();
        if (firstType != null) {
            stmt.bindString(18, firstType);
        }
 
        String secondType = entity.getSecondType();
        if (secondType != null) {
            stmt.bindString(19, secondType);
        }
 
        String imgFileArray = entity.getImgFileArray();
        if (imgFileArray != null) {
            stmt.bindString(20, imgFileArray);
        }
 
        String soundFileArray = entity.getSoundFileArray();
        if (soundFileArray != null) {
            stmt.bindString(21, soundFileArray);
        }
 
        String firstTypeId = entity.getFirstTypeId();
        if (firstTypeId != null) {
            stmt.bindString(22, firstTypeId);
        }
 
        String secondTypeId = entity.getSecondTypeId();
        if (secondTypeId != null) {
            stmt.bindString(23, secondTypeId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IssueCacheEntity readEntity(Cursor cursor, int offset) {
        IssueCacheEntity entity = new IssueCacheEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subject
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // occurOrgId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // issueKindId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // occurOrgInternalCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // occurLocation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mainCharacters
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // issueContent
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // relatePeopleCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isEmergency
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // important
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lon
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lat
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // occurDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // uniqueIdForMobile
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // files
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // firstType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // secondType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // imgFileArray
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // soundFileArray
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // firstTypeId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // secondTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IssueCacheEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOccurOrgId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIssueKindId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOccurOrgInternalCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOccurLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMainCharacters(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIssueContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRelatePeopleCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsEmergency(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImportant(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLat(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOccurDate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUniqueIdForMobile(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFiles(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFirstType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSecondType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setImgFileArray(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSoundFileArray(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFirstTypeId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSecondTypeId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IssueCacheEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IssueCacheEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
